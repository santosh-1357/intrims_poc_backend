package com.demo.service.impl;

import com.demo.domian.ApiResponse;
import com.demo.domian.DropDownResponse;
import com.demo.domian.dto.ChemicalTable;
import com.demo.domian.dto.DashboardDTO;
import com.demo.domian.dto.ImporterTable;
import com.demo.repository.PdfRepository;
import com.demo.service.PdfService;
import com.demo.service.PdfCreateService;
import common.library.constants.app.FwUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Objects;

@Service
public class PdfServiceImpl implements PdfService {


    @Autowired
    PdfCreateService pdfCreateService;

    @Autowired
    PdfRepository pdfRepository;

    @Override
    public DropDownResponse getDropDownData(DashboardDTO dashboardDTO) throws Exception {
        DropDownResponse dropDownResponse = null;
        try{
            // Check if the provided DashboardDTO is not null and contains required parameters
            if (Objects.nonNull(dashboardDTO) && FwUtils.isNotBlankOrNullString(dashboardDTO.getExporterName())
                    && FwUtils.isNotBlankOrNullString(dashboardDTO.getFromDate()) && FwUtils.isNotBlankOrNullString(dashboardDTO.getToDate())){
                // Retrieve drop-down data based on the provided parameters
                dropDownResponse = pdfRepository.getDropDownData(dashboardDTO);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        // Return the retrieved DropDownResponse object
        return dropDownResponse;
    }

    @Override
    public ApiResponse<byte[]> createExportDeclarationPdf(DashboardDTO dashboardDTO, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ApiResponse<byte[]> apiResponse = new ApiResponse<>();
        byte[] bytes= null;
        try{
            // Check if the provided DashboardDTO is not null and contains required parameters
            if (Objects.nonNull(dashboardDTO) && FwUtils.isNotBlankOrNullString(dashboardDTO.getExporterName())
                    && FwUtils.isNotBlankOrNullString(dashboardDTO.getFromDate()) && FwUtils.isNotBlankOrNullString(dashboardDTO.getToDate())
                    && FwUtils.isNotBlankOrNullString(dashboardDTO.getImporterCountry()) && FwUtils.isNotBlankOrNullString(dashboardDTO.getChemicalName())){
                // Fetch importer and chemical data based on the provided parameters
                List<ImporterTable> importerList = pdfRepository.getImporterTableData(dashboardDTO);
                List<ChemicalTable> chemicalList = pdfRepository.getChemicalTableData(dashboardDTO);
                if(FwUtils.isNotNullOrNotEmpty(importerList) && FwUtils.isNotNullOrNotEmpty(chemicalList)){
                    // Generate the PDF using the fetched data
                    pdfCreateService.createExportDeclarationPdf(dashboardDTO,importerList,chemicalList);
                    bytes = pdfCreateService.createExportDeclarationPdf(dashboardDTO,importerList,chemicalList,request,response);
                    apiResponse.setPayload(bytes);
                    apiResponse.setStatus("Success");
                }else {
                    apiResponse.setStatus("Fail");
                    apiResponse.setMessage("No Data Found for this match ");
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        // Return the generated byte array representing the PDF
        return apiResponse;
    }
}
